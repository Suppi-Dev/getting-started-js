- An Introduction to JavaScript
  
- Manuals and specifications
  Latest Speficifations - ECMASript 8
  
- Code editors
  VS Code Editors
  Sublime Code Editors
  
- Developer console
  V8 Machine
  Chrome Inspect Console
  
- JavaScript Fundamentals

- Hello, world! (1.Lesson navigation
2.The ‚Äúscript‚Äù tag
3.Modern markup
4.External scripts)
browser-specific commands (like alert)
how we attach a script to a webpage- For server-side environments (like Node.js),
you can execute the script with a command like "node my.js"
JavaScript programs can be inserted almost anywhere into an HTML document using the <script> tag 
 

- Code structure
<html>

<body>

  <p>Before the script...</p>

  <script>
    alert( 'Hello, world!' );
  </script>

  <p>...After the script.</p>

</body>
</html>
{****run the example by clicking the ‚ÄúPlay‚Äù button in the right-top corner of the box above.

The <script> tag contains JavaScript code which is automatically executed when the browser processes the tag****}
  MODERN MARKUP
1.  The type attribute: <script type=‚Ä¶>               }=NOT REQURIED
2.  The language attribute: <script language=‚Ä¶>
<script type="text/javascript"><!--
    ...
//--></script>
EXTERNAL  SCRIPTS
  
A single <script> tag can‚Äôt have both the src attribute and code inside
<script src="file.js">
  alert(1); // the content is ignored, because src is set
</script>

The example above can be split into two scripts to work:

<script src="file.js"></script>
<script>
  alert(1);
</script>
*We can use a <script> tag to add JavaScript code to a page.
The type and language attributes are not required.
A script in an external file can be inserted with <script src="path/to/script.js"></script>*

B))))
Code structure
The first thing we‚Äôll study is the building blocks of code.

1)Statements----Statements are syntax constructs and commands that perform actions,, alert('Hello, world!'), which shows the message ‚ÄúHello, world!‚Äù.Statements can be separated with a semicolon.EXAMPLE  here we split ‚ÄúHello World‚Äù into two alerts:alert('Hello'); alert('World');Usually, statements are written on separate lines to make the code more readable
alert('Hello');
alert('World');

2)Semicolons----A semicolon may be omitted in most cases when a line break exists.alert('Hello'),alert('World'),,Here, JavaScript interprets the line break as an ‚Äúimplicit‚Äù semicolon. This is called an automatic semicolon insertion.In most cases, a newline implies a semicolon. But ‚Äúin most cases‚Äù does not mean ‚Äúalways‚Äù!-example:alert(3 + 
1
+ 2);      ****The code outputs 6 because JavaScript does not insert semicolons here. It is intuitively obvious that if the line ends with a plus "+", then it is an ‚Äúincomplete expression‚Äù, so a semicolon there would be incorrect****

3)Comments----Comments can be put into any place of a script. They don‚Äôt affect its execution because the engine simply ignores them.
one-line comments start with two forward slash characters //.,,,,The rest of the line is a comment. It may occupy a full line of its own or follow a statement.
Like here:
// This comment occupies a line of its own
alert('Hello');
alert('World'); // This comment follows the statement
(Multiline comments start with a forward slash and an asterisk /* and end with an asterisk and a forward slash */)
Like this:
[/* An example with two messages.
This is a multiline comment.
*/
alert('Hello');
alert('World');]
Multiline comments start with a forward slash and an asterisk /* and end with an asterisk and a forward slash */.

Like this:

/* An example with two messages.
This is a multiline comment.
*/
alert('Hello');
alert('World');
The content of comments is ignored, so if we put code inside /* ‚Ä¶ */, it won‚Äôt execute.

Sometimes it can be handy to temporarily disable a part of code:

/* Commenting out the code
alert('Hello');
*/
alert('World');
Use hotkeys!
In most editors, a line of code can be commented out by pressing the Ctrl+/ hotkey for a single-line comment and something like Ctrl+Shift+/ ‚Äì for multiline comments (select a piece of code and press the hotkey). For Mac, try Cmd instead of Ctrl and Option instead of Shift.

Nested comments are not supported!
There may not be /*...*/ inside another /*...*/.

Multiline comments start with a forward slash and an asterisk /* and end with an asterisk and a forward slash */.

Like this:

/* An example with two messages.
This is a multiline comment.
*/
alert('Hello');
alert('World');
The content of comments is ignored, so if we put code inside /* ‚Ä¶ */, it won‚Äôt execute.

Sometimes it can be handy to temporarily disable a part of code:

/* Commenting out the code
alert('Hello');
*/
alert('World');
Use hotkeys!
In most editors, a line of code can be commented out by pressing the Ctrl+/ hotkey for a single-line comment and something like Ctrl+Shift+/ ‚Äì for multiline comments (select a piece of code and press the hotkey). For Mac, try Cmd instead of Ctrl and Option instead of Shift.

Nested comments are not supported!
There may not be /*...*/ inside another /*...*/.

Such code will die with an error:

/*
  /* nested comment ?!? */
*/
alert( 'World' );
Please, don‚Äôt hesitate to comment your code.

C))))The modern mode, "use strict"
For a long time, JavaScript evolved without compatibility issues. New features were added to the language while old functionality didn‚Äôt change.
The modern mode, "use strict"
For a long time, JavaScript evolved without compatibility issues. New features were added to the language while old functionality didn‚Äôt change.

That had the benefit of never breaking existing code. But the downside was that any mistake or an imperfect decision made by JavaScript‚Äôs creators got stuck in the language forever.

This was the case until 2009 when ECMAScript 5 (ES5) appeared. It added new features to the language and modified some of the existing ones. To keep the old code working, most such modifications are off by default. You need to explicitly enable them with a special directive: "use strict".

‚Äúuse strict‚Äù
The directive looks like a string: "use strict" or 'use strict'. When it is located at the top of a script, the whole script works the ‚Äúmodern‚Äù way.

For example:

"use strict";

// this code works the modern way
...
Browser console::::
When you use a developer console to run code, please note that it doesn‚Äôt use strict by default.

Sometimes, when use strict makes a difference, you‚Äôll get incorrect results.

So, how to actually use strict in the console?

First, you can try to press Shift+Enter to input multiple lines, and put use strict on top, like this:

'use strict'; <Shift+Enter for a newline>
//  ...your code
<Enter to run>
It works in most browsers, namely Firefox and Chrome.

(function() {
  'use strict';

  // ...your code here...
})()
Should we ‚Äúuse strict‚Äù?


A variable 
is a ‚Äúnamed storage‚Äù for data. We can use variables to store goodies, visitors, and other data.

To create a variable in JavaScript, use the let keyword.

let message
Now, we can put some data into it by using the assignment operator =:

let message;

message = 'Hello'; // store the string 'Hello' in the variable named message

let message;
message = 'Hello!';
alert(message); // shows the variable content
To be concise, we can combine the variable declaration and assignment into a single line:
let message = 'Hello!'; // define the variable and assign the value
alert(message); // Hello!
We can also declare multiple variables in one line:

let user = 'John', age = 25, message = 'Hello';

A real-life analogyü§ûüòÉ
We can easily grasp the concept of a ‚Äúvariable‚Äù if we imagine it as a ‚Äúbox‚Äù for data, with a uniquely-named sticker on it

We can also change it as many times as we want
let message;
message = 'Hello!';
message = 'World!'; // value changed

alert(message);
When the value is changed, the old data is removed from the variable:


*We can also declare two variables and copy data from one into the other.

let hello = 'Hello world!';
let message;
// copy 'Hello world' from hello into message
message = hello;

// now two variables hold the same dataThere are two limitations on variable names in JavaScript:

The name must contain only letters, digits, or the symbols $ and _.
The first character must not be a digit.
Examples of valid names:
let userName;
let test123;
alert(hello); // Hello world!
alert(message); // Hello world!

Constants
To declare a constant (unchanging) variable, use const instead of let:
const myBirthday = '18.04.1982';
Variables declared using const are called ‚Äúconstants‚Äù. They cannot be reassigned. An attempt to do so would cause an error:
const myBirthday = '18.04.1982';
myBirthday = '01.01.2001'; // error, can't reassign the constant!

Data types::::
A value in JavaScript is always of a certain type. For example, a string or a number.

There are eight basic data types in JavaScript. Here, we‚Äôll cover them in general and in the next chapters we‚Äôll talk about each of them in detail.
1)Number
2) BigInt
3) String
4) Boolean (logical type)
5) The ‚Äúnull‚Äù value
6) The ‚Äúundefined‚Äù value
7)objects and Symbols
8)The typeof operator

E))))Interaction: alert, prompt, confirm

alert
prompt
confirm
As we‚Äôll be using the browser as our demo environment, let‚Äôs see a couple of functions to interact with the user: alert, prompt and confirm.

alertü§û
This one we‚Äôve seen already. It shows a message and waits for the user to press ‚ÄúOK‚Äù.

For example:
alert("Hello");

prompt ü§û
The function prompt accepts two arguments:

result = prompt(title, [default]);
It shows a modal window with a text message, an input field for the visitor, and the buttons OK/Cancel.

 confirmü§û
The syntax:

result = confirm(question);
The function confirm shows a modal window with a question and two buttons: OK and Cancel.
The result is true if OK is pressed and false otherwise.
For example:
let isBoss = confirm("Are you the boss?");

alert( isBoss ); // true if OK is pressed

G))))Type Conversions
Most of the time, operators and functions automatically convert the values given to them to the right type.

For example, alert automatically converts any value to a string to show it. Mathematical operations convert values to numbers.
String Conversion
Numeric Conversion
Boolean Conversion

1)String conversion üéÄ happens when we need the string form of a value.

For example, alert(value) does it to show the value.

We can also call the String(value) function to convert a value to a string:
let value = true;
alert(typeof value); // boolean
value = String(value); // now value is a string "true"
alert(typeof value); // string

2)Numeric conversion üéÄ happens in mathematical functions and expressions automatically.

For example, when division / is applied to non-numbers:

alert( "6" / "2" ); // 3, strings are converted to numbers
We can use the Number(value) function to explicitly convert a value to a number
let str = "123";
alert(typeof str); // string
let num = Number(str); // becomes a number 123
alert(typeof num); // number

3)Boolean ConversionüéÄ
is the simplest one.

It happens in logical operations (later we‚Äôll meet condition tests and other similar things) but can also be performed explicitly with a call to Boolean(value).

The conversion rule:
Values that are intuitively ‚Äúempty‚Äù, like 0, an empty string, null, undefined, and NaN, become false.
Other values become true.
For instance:
alert( Boolean(1) ); // true
alert( Boolean(0) ); // false
alert( Boolean("hello") ); // true
alert( Boolean("") ); // false

H))))Basic operators, maths
We know many operators from school. They are things like addition +, multiplication *, subtraction -, and so on.
In this chapter, we‚Äôll start with simple operators, then concentrate on JavaScript-specific aspects, not covered by school arithmetic.
1)Terms: ‚Äúunary‚Äù, ‚Äúbinary‚Äù, ‚Äúoperand‚Äù
2)Maths
3)String concatenation with binary +
4)Numeric conversion, unary +
5)Operator precedence
6)Assignment
7)Modify-in-place
8)Increment/decrement
9)Bitwise operators
10)Comma

1)Terms: ‚Äúunary‚Äù, ‚Äúbinary‚Äù, ‚Äúoperand‚ÄùBefore we move on, let‚Äôs grasp some common terminology.

An operand ‚Äì is what operators are applied to. For instance, in the multiplication of 5 * 2 there are two operands: the left operand is 5 and the right operand is 2. Sometimes, people call these ‚Äúarguments‚Äù instead of ‚Äúoperands‚Äù.

An operator is unary if it has a single operand. For example, the unary negation - reverses the sign of a number:
let x = 1;
x = -x;
alert( x ); // -1, unary negation was applied
An operator is binary if it has two operands. The same minus exists in binary form as well:
let x = 1, y = 3;
alert( y - x ); // 2, binary minus subtracts values

2)Maths: The following math operations are supported:

Addition +,
Subtraction -,
Multiplication *,
Division /,
Remainder %,
Exponentiation **.
The first four are straightforward.

3)String concatenation  with binary + :Usually, the plus operator + sums numbers.

But, if the binary + is applied to strings, it merges (concatenates) them:
let s = "my" + "string";
alert(s); // mystring

For example:
alert( '1' + 2 ); // "12"
alert( 2 + '1' ); // "21"
See, it doesn‚Äôt matter whether the first operand is a string or the second one.

Here‚Äôs a more complex example:
alert(2 + 2 + '1' ); // "41" and not "221"
Here, operators work one after another. The first + sums two numbers, so it returns 4, then the next + adds the string 1 to it, so it‚Äôs like 4 + '1' = '41'.
alert('1' + 2 + 2); // "122" and not "14"

4)Usually, the plus operator + sums numbers :

The unary plus or, in other words, the plus operator + applied to a single value, doesn‚Äôt do anything to numbers. But if the operand is not a number, the unary plus converts it into a number.

For example:
// No effect on numbers
let x = 1;
alert( +x ); // 1
let y = -2;
alert( +y ); // -2
// Converts non-numbers
alert( +true ); // 1
alert( +"" );   // 0

5)Operator precedence:
Precedence	                 Sign
 |    Name                   
       |                        
‚Ä¶    	‚Ä¶     	               ‚Ä¶
17	unary                 plus	+
17	unary                negation	-
16	exponentiation	         **
15	multiplication	          *
15	division	                /
13	addition                	+
13	subtraction	              -
‚Ä¶      ‚Ä¶                     	‚Ä¶
3	  assignment               	=
‚Ä¶      	‚Ä¶                   	‚Ä¶



6)Assignment
Let‚Äôs note that an assignment = is also an operator. It is listed in the precedence table with the very low priority of 3.

That‚Äôs why, when we assign a variable, like x = 2 * 2 + 1, the calculations are done first and then the = is evaluated, storing the result in x.
let x = 2 * 2 + 1;
alert( x ); // 5


7)Modify-in-place:
We often need to apply an operator to a variable and store the new result in that same variable.

For example:
let n = 2;
n = n + 5;
n = n * 2;
This notation can be shortened using the operators += and *=:
let n = 2;
n += 5; // now n = 7 (same as n = n + 5)
n *= 2; // now n = 14 (same as n = n * 2)
alert( n ); // 14


8)Increment/decrement:
Increasing or decreasing a number by one is among the most common numerical operations.

So, there are special operators for it:
Increment ++ increases a variable by 1:
let counter = 2;
counter++;        // works the same as counter = counter + 1, but is shorter
alert( counter ); // 3

Decrement -- decreases a variable by 1:

let counter = 2;
counter--;        // works the same as counter = counter - 1, but is shorter
alert( counter ); // 1

9)Bitwise operators:
Bitwise operators treat arguments as 32-bit integer numbers and work on the level of their binary representation.These operators are not JavaScript-specific. They are supported in most programming languages.

The list of operators:

AND ( & )
OR ( | )
XOR ( ^ )
NOT ( ~ )
LEFT SHIFT ( << )
RIGHT SHIFT ( >> )
ZERO-FILL RIGHT SHIFT ( >>> )

10)Comma:
The comma operator , is one of the rarest and most unusual operators. Sometimes, it‚Äôs used to write shorter code, so we need to know it in order to understand what‚Äôs going on.

The comma operator allows us to evaluate several expressions, dividing them with a comma ,. Each of them is evaluated but only the result of the last one is returned.

For example:
let a = (1 + 2, 3 + 4);
alert( a ); // 7 (the result of 3 + 4)

I))))
Comparisons
We know many comparison operators from maths.

Greater/less than: a > b, a < b.
Greater/less than or equals: a >= b, a <= b.
Equals: a == b, please note the double equality sign == means the equality test, while a single one a = b means an assignment.


Boolean is the result
String comparison
Comparison of different types
Strict equality
Comparison with null and undefined

J))))Conditional branching: if, '?'
Sometimes, we need to perform different actions based on different conditions.
To do that, we can use the if statement and the conditional operator ?, that‚Äôs also called a ‚Äúquestion mark‚Äù operator.

1)The ‚Äúif‚Äù statement
The if(...) statement evaluates a condition in parentheses and, if the result is true, executes a block of code.
For example:
let year = prompt('In which year was ECMAScript-2015 specification published?', '');
if (year == 2015) alert( 'You are right!' );

2)Boolean conversion
A number 0, an empty string "", null, undefined, and NaN all become false. Because of that they are called ‚Äúfalsy‚Äù values.
Other values become true, so they are called ‚Äútruthy‚Äù.
So, the code under this condition would never execute:
if (0) { // 0 is falsy
  ...
}

3)The ‚Äúelse‚Äù clause :
The if statement may contain an optional ‚Äúelse‚Äù block. It executes when the condition is falsy.

For example:
let year = prompt('In which year was the ECMAScript-2015 specification published?', '');
if (year == 2015) {
  alert( 'You guessed it right!' );
} else {
  alert( 'How can you be so wrong?' ); // any value except 2015
}

4)Several conditions: ‚Äúelse if‚Äù :
let year = prompt('In which year was the ECMAScript-2015 specification published?', '');
if (year < 2015) {
  alert( 'Too early...' );
} else if (year > 2015) {
  alert( 'Too late' );
} else {
  alert( 'Exactly!' );
}

5)Conditional operator ‚Äò?‚Äô :
let accessAllowed;
let age = prompt('How old are you?', '');
if (age > 18) {
  accessAllowed = true;
} else {
  accessAllowed = false;
}
alert(accessAllowed);
The so-called ‚Äúconditional‚Äù or ‚Äúquestion mark


6)Multiple ‚Äò?‚Äô :
A sequence of question mark operators ? can return a value that depends on more than one condition.

For instance:
let age = prompt('age?', 18);
let message = (age < 3) ? 'Hi, baby!' :
  (age < 18) ? 'Hello!' :
  (age < 100) ? 'Greetings!' :
  'What an unusual age!';
alert( message );

7)Non-traditional use of ‚Äò?‚Äô :
Sometimes the question mark ? is used as a replacement for if:
let company = prompt('Which company created JavaScript?', '');
(company == 'Netscape') ?
   alert('Right!') : alert('Wrong.');
   
   
   
K))))Logical operators:
There are four logical operators in JavaScript: || (OR), && (AND), ! (NOT), ?? (Nullish Coalescing). Here we cover the first three, the ?? operator is in the next article.

1)|| (OR)
2)OR "||" finds the first truthy value
3)&& (AND)
4)AND ‚Äú&&‚Äù finds the first falsy value
5)! (NOT)

Although they are called ‚Äúlogical‚Äù, they can be applied to values of any type, not only boolean. Their result can also be of any type.
Let‚Äôs see the details.
1)    || (OR)
The ‚ÄúOR‚Äù operator is represented with two vertical line symbols:
result = a || b;
3)The AND operator is represented with two ampersands &&:
result = a && b;
In classical programming, AND returns true if both operands are truthy and false otherwise:
alert( true && true );   // true
alert( false && true );  // false
alert( true && false );  // false
alert( false && false ); // false
4)Given multiple AND‚Äôed values:

result = value1 && value2 && value3;
5)! (NOT)

The boolean NOT operator is represented with an exclamation sign !.
The syntax is pretty simple:
result = !value;

L))))Nullish coalescing operator '??' ::::
The nullish coalescing operator is written as two question marks ??.

As it treats null and undefined similarly, we‚Äôll use a special term here, in this article. We‚Äôll say that an expression is ‚Äúdefined‚Äù when it‚Äôs neither null nor undefined.

The result of a ?? b is:
if a is defined, then a,
if a isn‚Äôt defined, then b.
In other words, ?? returns the first argument if it‚Äôs not null/undefined. Otherwise, the second one.

The nullish coalescing operator isn‚Äôt anything completely new. It‚Äôs just a nice syntax to get the first ‚Äúdefined‚Äù value of the two.

We can rewrite result = a ?? b using the operators that we already know, like this:

result = (a !== null && a !== undefined) ? a : b;
Now it should be absolutely clear what ?? does. Let‚Äôs see where it helps.

The common use case for ?? is to provide a default value for a potentially undefined variable.

For example, here we show user if defined, otherwise Anonymous:
let user;
alert(user ?? "Anonymous"); // Anonymous (user not defined)
Here‚Äôs the example with user assigned to a name:

M))))Loops: while and for
We often need to repeat actions.
1)The ‚Äúwhile‚Äù loop
2)The ‚Äúdo‚Ä¶while‚Äù loop
3)The ‚Äúfor‚Äù loop
4)Breaking the loop
5)Continue to the next iteration
6)Labels for break/continue

For example, outputting goods from a list one after another or just running the same code for each number from 1 to 10.

Loops are a way to repeat the same code multiple times.

The ‚Äúwhile‚Äù loop
The while loop has the following syntax:
while (condition) {
  // code
  // so-called "loop body"
}

The condition check can be moved below the loop body using the do..while syntax:

do {
  // loop body
} while (condition);


N))))The "switch" statement ::::
1)An example
2)Grouping of ‚Äúcase‚Äù
3)Type matters
4)A switch statement can replace multiple if checks.

It gives a more descriptive way to compare a value with multiple variants.

The syntax
The switch has one or more case blocks and an optional default.

It looks like this:

switch(x) {
  case 'value1':  // if (x === 'value1')
    ...
    [break]

  case 'value2':  // if (x === 'value2')
    ...
    [break]

  default:
    ...
    [break]
}


O))))Functions ::::
1)Function Declaration
2)Local variables
3)Outer variables
4)Parameters
5)Default values
6)Returning a value
7)Naming a function
8)Functions == Comments
9)values

P)))) Function expressions ::::
1)Function is a value
2)Callback functions
3)Function Expression vs
4)Function Declaration
In JavaScript, a function is not a ‚Äúmagical language structure‚Äù, but a special kind of value.

The syntax that we used before is called a Function Declaration:
function sayHi() {
  alert( "Hello" );
}


